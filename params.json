{"name":"Stub.js","body":"Stub.js\r\n=======\r\n\r\n# What is Stub.js?\r\n\r\nStub.js is a dead simple to use mocking / stubbing library to help you unit test your javascript nodejs modules.\r\n\r\n## Why a stubbing library?\r\n\r\nWell, javascript has the ability to mock an object built into it, you can just define an\r\nobject literal, and wammo, you have a mock.  But what if I want to track what happened to that\r\nmock when it's passed into some code module that I want to test?  You need something to record\r\nwhat has happened while it was in use.  That is what stub does, it will record everything that happens\r\nto a stubbed method, and allow you to assert on expected events later.\r\n\r\n## But there are already libraries out there for javascript?\r\n\r\nYes, there are, but they all seemed so heavy to me, and tried to take on an almost Java-ish feel\r\nto them.  But this is javascript, why does it have to be so complex?  So I created my own library\r\nthat I think is just complex enough to get the job done.\r\n\r\n# Contribute\r\n\r\nFeel free to submit your comments / feedback / suggestions / feature request.  Just keep in mind, I want this to stay simple to use, and small and light.\r\n\r\n# Features\r\n\r\n * stub asynchronous functions\r\n * stub synchronous functions\r\n * stub a nested chain of stubs\r\n * throw simulated errors from within the stub\r\n\r\n# Installation\r\n\r\n    npm install stub-js\r\n\r\n## Dependancies\r\n\r\nSo far this is dependant on:\r\n\r\n  * Nodejs >= 0.4.1\r\n  * I personally use this with should.js and mocha. They ROCK!\r\n\r\n# Example with both Synchronous and Asynchronous stubs\r\n\r\n### Here is the module we want to isolate and test\r\n\r\n```javascript\r\nmodule.exports = (function() {\r\n  var model;\r\n\r\n  function init ( personModel ) {\r\n    model = personModel;\r\n  }\r\n\r\n  function findById(id, callback){\r\n    model.find( {_id: id } ).exec( function( err, person ) {\r\n      callback(err, person);\r\n    } );\r\n  }\r\n\r\n  return {\r\n    init: init,\r\n    findById: findById\r\n  }\r\n}());\r\n```\r\n\r\n### Here is what our test case would look like using Mocha, Should.js, and Stub.js\r\n\r\n```javascript\r\ndescribe( 'myApp.tests.unit.controllers.person', function() {\r\n\r\n  var stub = require('stub.js');\r\n  var mockPersonModel;\r\n\r\n  var expectedPerson = {\r\n    firstName: 'test',\r\n    lastName: 'test2'\r\n  };\r\n\r\n  beforeEach(done){\r\n    // Here we define our mock\r\n    mockPersonModel = {\r\n      // Here we are defining a stub method that will return synchronously a nested mock object.\r\n      find: stub.sync( {\r\n        // Here we are defining an exec method that will execute asynchronously and pass a null\r\n        // and a 'testPerson' object to its callback.\r\n        exec: stub.async(null, expectedPerson)\r\n      } )\r\n    };\r\n    done();\r\n  }\r\n\r\n  describe( '.findById(id)', function() {\r\n    it( 'should call the model find function and return the specified object', function( done ) {\r\n\r\n      // Now we can test the controller giving it our mock object\r\n      personController.init(mockPersonModel);\r\n\r\n      personController.findById('1234', function ( err, actualPerson) {\r\n        actualPerson.firstName.should.equal(expectedPerson.firstName);\r\n        actualPerson.lastName.should.equal(expectedPerson.lastName);\r\n        mockPersonModel.find.called.withArguments( {_id: '1234'} );\r\n        // Heres how we test our nested mock object, that it was called as we expected.\r\n        mockPersonModel.find().exec.called.withNoArguments();\r\n        done(err);\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n# API\r\n\r\n## How to Require it in your test module\r\nIf you have used NPM to install it, or included it in your package.json file, you just have to simply require it and it is ready to use.  No need to use the `new` keyword.\r\n\r\n```\r\nvar stub = require('stub.js');\r\n```\r\n\r\n## Defining a Mock and Stubs\r\n\r\n### stub.sync( Error )\r\nIf a ```new Error('some error')``` or any object that inherits from Error is provide, it will simulate throwing an error from within the mock.\r\n\r\n```javascript\r\n// Define the mock\r\nvar mockObject = {\r\n    method: stub.sync( new Error('some error occurred.'))\r\n};\r\n```\r\n\r\nWhen our stubbed method is called it will throw an exception, instead of returning a value.\r\n\r\n```javascript\r\n  // throws an error\r\n  mockObject.method( 'something' );\r\n```\r\n\r\nWe can also later inspect our mock to see what happened.\r\n\r\n```javascript\r\n  // this an actual test assertion it will cause a test failure if it doesn't pass.\r\n  mockObject.method.called.withArguments( 'something' );\r\n```\r\n\r\n### stub.sync( returnValue )\r\nIf any value or object other than Error is passed in will just be returned as the ```returnValue``` from the stub when it is called.\r\n\r\n```javascript\r\n// Define the mock\r\nvar mockObject = {\r\n    method: stub.sync( true )\r\n};\r\n```\r\n\r\nWhen our stubbed method is called it will return the hard coded value that we specificied.\r\n\r\n```javascript\r\n// returns true\r\nvar result = mockObject.method( 'something' );\r\n```\r\n\r\nWe can also later inspect our mock to see what happened.\r\n\r\n```javascript\r\n// this an actual test assertion it will cause a test failure if it doesn't pass.\r\nmockObject.method.called.withArguments( 'something' );\r\n```\r\n\r\n### stub.async( param1, param2, […])\r\n\r\nThis will create an `asynchronous` stub that will pass the provided values to a call back.  FYI - The defacto standard for asynchronous calls in javascript is that the first parameter in the callback is reserved for errors, subsequent parameters are for success.\r\n\r\n```javascript\r\n// Define our mock and stub\r\nvar mockObject = {\r\n    method: stub.async( null, 'our value' )\r\n}\r\n```\r\n\r\nWhen called our stubbed method will call the callback with the values that we specified.\r\n\r\n```javascript\r\n// calls the callback with 'our value'\r\nmockObject.method( 'some value', function (err, value ) {\r\n    // Do stuff\r\n} );\r\n```\r\n\r\nAgain, we can assert what our stubs where called with.\r\n\r\n```javascript\r\n// this an actual test assertion, in this case it would cause a failure\r\n// because the stub was actually called with 'some value'.\r\nmockObject.method.called.withArguments( 'something' );\r\n```\r\n\r\n## Asserting your Stubs\r\n\r\n### mockObject.stub.called\r\n\r\nThis contains the information recorded while in use.\r\n\r\n### mockObject.stub.called.count(2)\r\n\r\nIt will test if the method was called the number of specified times.\r\n\r\n### mockObject.stub.called.withArguments( args…)\r\n\r\nIt will test if the arguments you passed in matches the actuals that it was called with.\r\n\r\n### mockObject.stub.called.withAnyArguments()\r\n\r\nIt will test if method was called with anything.\r\n\r\n### mockObject.stub.called.withNoArguments()\r\n\r\nIt will test if the method was called without any arguments.\r\n\r\n### mockObject.stub.called.time(1).withArguments( args…)\r\n\r\nIt will test if the first time the method was called that the actual parameters passed to it match what you specified.\r\n\r\n### mockObject.stub.called.time(1).withAnyArguments()\r\n\r\nIt will test if the first time the method was called that it was called with any arguments.\r\n\r\n### mockObject.stub.called.time(1).withNoArguments()\r\n\r\nIt will test if the first time the method was called that it was called without any arguments.\r\n\r\n## Asserting Chained Stubs\r\n\r\nAssuming a mock / stubs defined in a nested chain like the following:\r\n\r\n```javascript\r\nvar mockObject {\r\n    stub1: stub.sync( {\r\n        stub2: stub.sync()\r\n    })\r\n}\r\n```\r\n\r\n### mockObject.stub1.called.count(1)\r\n\r\nIt will assert the first call in the chain was called 1 time.\r\n\r\n### mockObject.stub1().stub2.called.count(1)\r\n\r\nIt will assert the second call in the chain was called 1 time.\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011 Keith Larsen\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tagline":"A very simple and easy to use mocking / stubbing library for unit testing your nodejs javascript modules","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}